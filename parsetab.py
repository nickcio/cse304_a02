
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftEQUALSleftORleftANDleftDOUBLE_EQUALSNOT_EQUALnonassocLESSGREATERL_EQG_EQleftPLUSMINUSleftTIMESDIVIDErightNOTAND BOOLEAN BREAK CLASS COMMA CONTINUE DIVIDE DO DOT DOUBLE_EQUALS DOUBLE_MINUS DOUBLE_PLUS ELSE EQUALS EXTENDS FALSE FLOAT FLOAT_CONST FOR GREATER G_EQ ID IF INT INT_CONST LBRACK LESS LPAREN L_EQ MINUS NEW NOT NOT_EQUAL NULL OR PLUS PRIVATE PUBLIC RBRACK RETURN RPAREN SEMICOLON STATIC STRING_CONST SUPER THIS TIMES TRUE VOID WHILEempty :\n    program : class_decl\n             | class_decl program\n             | empty\n    class_decl : CLASS ID opt_extend LBRACK class_body_decl_mult RBRACK\n    opt_extend : EXTENDS ID\n                | empty\n    \n    class_body_decl_mult : class_body_decl_mult class_body_decl\n                         | class_body_decl\n    \n    class_body_decl : field_decl\n                    | method_decl\n                    | constructor_decl\n    \n    field_decl : modifier var_decl\n    \n    modifier : visibility opt_static\n    visibility : PUBLIC\n               | PRIVATE\n               | empty\n    opt_static : STATIC\n               | empty\n    \n    var_decl : type variables SEMICOLON\n    \n    type : INT\n         | FLOAT\n         | BOOLEAN\n         | ID\n    \n    variables : variables COMMA variable\n              | variable\n    \n    variable : ID\n    \n    method_decl : modifier type ID LPAREN opt_formals RPAREN block\n                | modifier VOID ID LPAREN opt_formals RPAREN block\n    opt_formals : formals\n                | empty\n    \n    constructor_decl : modifier ID LPAREN opt_formals_alt RPAREN block\n    opt_formals_alt : formals\n                    | empty\n    \n    formals : formals COMMA formal_param\n            | formal_param\n    \n    formal_param : type variable\n    \n    block : LBRACK stmt_mult RBRACK\n    \n    stmt_mult : stmt_mult stmt\n              | empty\n    \n    stmt : IF LPAREN expr RPAREN stmt opt_else_stmt\n         | WHILE LPAREN expr RPAREN stmt\n         | FOR LPAREN opt_stmt_expr SEMICOLON opt_expr SEMICOLON opt_stmt_expr RPAREN stmt\n         | RETURN opt_expr SEMICOLON\n         | stmt_expr SEMICOLON\n         | BREAK SEMICOLON\n         | CONTINUE SEMICOLON\n         | block\n         | var_decl\n         | SEMICOLON\n    opt_else_stmt : ELSE stmt\n                  | empty\n    opt_expr : expr\n             | empty\n    opt_stmt_expr : stmt_expr\n                  | empty\n    \n    literal : INT_CONST\n            | FLOAT_CONST\n            | STRING_CONST\n            | NULL\n            | TRUE\n            | FALSE\n    \n    primary : literal\n            | THIS\n            | SUPER\n            | LPAREN expr RPAREN\n            | NEW ID LPAREN opt_args RPAREN\n            | lhs\n            | method_invocation\n    opt_args : arguments\n             | empty\n    \n    arguments : arguments COMMA expr\n              | expr\n    \n    lhs : field_access\n    \n    field_access : primary DOT ID\n                 | ID\n    \n    method_invocation : field_access LPAREN opt_args_alt RPAREN\n    opt_args_alt : arguments\n                 | empty\n    \n    expr : primary\n         | assign\n         | expr arith_op expr\n         | expr bool_op expr\n         | unary_op expr\n    \n    assign : lhs EQUALS expr\n           | lhs DOUBLE_PLUS\n           | DOUBLE_PLUS lhs\n           | lhs DOUBLE_MINUS\n           | DOUBLE_MINUS lhs\n    \n    arith_op : PLUS\n             | MINUS\n             | TIMES\n             | DIVIDE\n    \n    bool_op : AND\n            | OR\n            | DOUBLE_EQUALS\n            | NOT_EQUAL\n            | L_EQ\n            | G_EQ\n            | LESS\n            | GREATER\n    \n    unary_op : PLUS\n             | MINUS\n             | NOT\n    \n    stmt_expr : assign\n              | method_invocation\n    '
    
_lr_action_items = {'CLASS':([0,2,22,],[4,4,-5,]),'$end':([0,1,2,3,5,22,],[-1,0,-1,-4,-3,-5,]),'ID':([4,8,10,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,37,39,40,41,42,47,48,55,59,60,63,64,65,66,67,68,70,73,74,78,79,82,84,85,87,92,99,103,107,108,109,111,112,116,117,118,119,124,125,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[6,11,-1,-1,-9,-10,-11,-12,26,-1,-15,-16,-17,-8,-13,34,-24,38,-21,-22,-23,-14,-18,-19,42,42,-20,53,-24,53,42,42,-32,-1,-28,87,-40,-29,-38,-39,104,-50,104,-48,-49,53,104,104,-24,126,104,104,-102,-103,-104,104,104,-45,-46,-47,104,104,154,104,104,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,104,87,87,104,104,-1,-42,-41,87,-52,104,-51,87,-43,]),'EXTENDS':([6,],[8,]),'LBRACK':([6,7,9,11,40,54,58,60,62,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-1,10,-7,-6,-20,60,60,-1,60,60,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,60,60,-1,-42,-41,60,-52,-51,60,-43,]),'PUBLIC':([10,12,13,14,15,16,23,24,40,59,63,66,67,],[19,19,-9,-10,-11,-12,-8,-13,-20,-32,-28,-29,-38,]),'PRIVATE':([10,12,13,14,15,16,23,24,40,59,63,66,67,],[20,20,-9,-10,-11,-12,-8,-13,-20,-32,-28,-29,-38,]),'STATIC':([10,12,13,14,15,16,18,19,20,21,23,24,40,59,63,66,67,],[-1,-1,-9,-10,-11,-12,32,-15,-16,-17,-8,-13,-20,-32,-28,-29,-38,]),'VOID':([10,12,13,14,15,16,17,18,19,20,21,23,24,31,32,33,40,59,63,66,67,],[-1,-1,-9,-10,-11,-12,27,-1,-15,-16,-17,-8,-13,-14,-18,-19,-20,-32,-28,-29,-38,]),'INT':([10,12,13,14,15,16,17,18,19,20,21,23,24,31,32,33,37,39,40,48,55,59,60,63,64,65,66,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-1,-1,-9,-10,-11,-12,28,-1,-15,-16,-17,-8,-13,-14,-18,-19,28,28,-20,28,28,-32,-1,-28,28,-40,-29,-38,-39,-50,-48,-49,-45,-46,-47,-44,28,28,-1,-42,-41,28,-52,-51,28,-43,]),'FLOAT':([10,12,13,14,15,16,17,18,19,20,21,23,24,31,32,33,37,39,40,48,55,59,60,63,64,65,66,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-1,-1,-9,-10,-11,-12,29,-1,-15,-16,-17,-8,-13,-14,-18,-19,29,29,-20,29,29,-32,-1,-28,29,-40,-29,-38,-39,-50,-48,-49,-45,-46,-47,-44,29,29,-1,-42,-41,29,-52,-51,29,-43,]),'BOOLEAN':([10,12,13,14,15,16,17,18,19,20,21,23,24,31,32,33,37,39,40,48,55,59,60,63,64,65,66,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-1,-1,-9,-10,-11,-12,30,-1,-15,-16,-17,-8,-13,-14,-18,-19,30,30,-20,30,30,-32,-1,-28,30,-40,-29,-38,-39,-50,-48,-49,-45,-46,-47,-44,30,30,-1,-42,-41,30,-52,-51,30,-43,]),'RBRACK':([12,13,14,15,16,23,24,40,59,60,63,64,65,66,67,68,73,78,79,116,117,118,148,166,167,171,173,175,178,],[22,-9,-10,-11,-12,-8,-13,-20,-32,-1,-28,67,-40,-29,-38,-39,-50,-48,-49,-45,-46,-47,-44,-1,-42,-41,-52,-51,-43,]),'LPAREN':([26,34,38,40,60,64,65,67,68,69,70,71,72,73,74,78,79,84,85,86,87,99,103,104,107,108,109,110,111,112,116,117,118,119,124,126,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,154,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[37,39,48,-20,-1,70,-40,-38,-39,99,70,111,112,-50,70,-48,-49,70,70,124,-76,70,70,-76,-102,-103,-104,124,70,70,-45,-46,-47,70,70,155,70,70,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,-75,70,70,70,70,70,-1,-42,-41,70,-52,70,-51,70,-43,]),'SEMICOLON':([34,35,36,40,52,53,60,64,65,67,68,73,74,75,76,77,78,79,80,81,89,90,91,93,94,95,96,97,98,101,102,104,105,106,110,112,113,114,115,116,117,118,120,121,122,123,128,143,145,146,147,148,149,154,156,157,158,159,160,161,166,167,168,170,171,172,173,175,177,178,],[-27,40,-26,-20,-25,-27,-1,73,-40,-38,-39,-50,-1,116,117,118,-48,-49,-105,-106,-63,-64,-65,-57,-58,-59,-60,-61,-62,-80,-81,-76,-68,-69,-74,-1,148,-53,-54,-45,-46,-47,-86,-88,-87,-89,-66,-84,160,-55,-56,-44,-85,-75,73,-82,-83,73,-1,-77,-1,-42,174,-67,-41,73,-52,-51,73,-43,]),'COMMA':([34,35,36,44,46,50,52,53,56,61,89,90,91,93,94,95,96,97,98,101,102,104,105,106,110,120,121,122,123,128,143,149,151,153,154,157,158,161,164,169,170,],[-27,41,-26,55,-36,55,-25,-27,-37,-35,-63,-64,-65,-57,-58,-59,-60,-61,-62,-80,-81,-76,-68,-69,-74,-86,-88,-87,-89,-66,-84,-85,162,-73,-75,-82,-83,-77,162,-72,-67,]),'RPAREN':([37,39,43,44,45,46,48,49,50,51,53,56,57,61,80,81,89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,120,121,122,123,124,127,128,143,144,146,147,149,150,151,152,153,154,155,157,158,161,163,164,165,169,170,174,176,],[-1,-1,54,-33,-34,-36,-1,58,-30,-31,-27,-37,62,-35,-105,-106,-63,-64,-65,-57,-58,-59,-60,-61,-62,128,-80,-81,-76,-68,-69,-74,-86,-88,-87,-89,-1,156,-66,-84,159,-55,-56,-85,161,-78,-79,-73,-75,-1,-82,-83,-77,170,-70,-71,-72,-67,-1,177,]),'IF':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,69,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,69,69,-1,-42,-41,69,-52,-51,69,-43,]),'WHILE':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,71,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,71,71,-1,-42,-41,71,-52,-51,71,-43,]),'FOR':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,72,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,72,72,-1,-42,-41,72,-52,-51,72,-43,]),'RETURN':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,74,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,74,74,-1,-42,-41,74,-52,-51,74,-43,]),'BREAK':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,76,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,76,76,-1,-42,-41,76,-52,-51,76,-43,]),'CONTINUE':([40,60,64,65,67,68,73,78,79,116,117,118,148,156,159,166,167,171,172,173,175,177,178,],[-20,-1,77,-40,-38,-39,-50,-48,-49,-45,-46,-47,-44,77,77,-1,-42,-41,77,-52,-51,77,-43,]),'DOUBLE_PLUS':([40,60,64,65,67,68,70,73,74,78,79,83,86,87,99,103,104,105,107,108,109,110,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,154,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,84,-40,-38,-39,84,-50,84,-48,-49,120,-74,-76,84,84,-76,120,-102,-103,-104,-74,84,84,-45,-46,-47,84,84,84,84,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,-75,84,84,84,84,84,-1,-42,-41,84,-52,84,-51,84,-43,]),'DOUBLE_MINUS':([40,60,64,65,67,68,70,73,74,78,79,83,86,87,99,103,104,105,107,108,109,110,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,154,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,85,-40,-38,-39,85,-50,85,-48,-49,121,-74,-76,85,85,-76,121,-102,-103,-104,-74,85,85,-45,-46,-47,85,85,85,85,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,-75,85,85,85,85,85,-1,-42,-41,85,-52,85,-51,85,-43,]),'THIS':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,90,-40,-38,-39,90,-50,90,-48,-49,90,90,90,90,-102,-103,-104,90,90,-45,-46,-47,90,90,90,90,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,90,90,90,90,90,-1,-42,-41,90,-52,90,-51,90,-43,]),'SUPER':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,91,-40,-38,-39,91,-50,91,-48,-49,91,91,91,91,-102,-103,-104,91,91,-45,-46,-47,91,91,91,91,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,91,91,91,91,91,-1,-42,-41,91,-52,91,-51,91,-43,]),'NEW':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,92,-40,-38,-39,92,-50,92,-48,-49,92,92,92,92,-102,-103,-104,92,92,-45,-46,-47,92,92,92,92,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,92,92,92,92,92,-1,-42,-41,92,-52,92,-51,92,-43,]),'INT_CONST':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,93,-40,-38,-39,93,-50,93,-48,-49,93,93,93,93,-102,-103,-104,93,93,-45,-46,-47,93,93,93,93,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,93,93,93,93,93,-1,-42,-41,93,-52,93,-51,93,-43,]),'FLOAT_CONST':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,94,-40,-38,-39,94,-50,94,-48,-49,94,94,94,94,-102,-103,-104,94,94,-45,-46,-47,94,94,94,94,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,94,94,94,94,94,-1,-42,-41,94,-52,94,-51,94,-43,]),'STRING_CONST':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,95,-40,-38,-39,95,-50,95,-48,-49,95,95,95,95,-102,-103,-104,95,95,-45,-46,-47,95,95,95,95,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,95,95,95,95,95,-1,-42,-41,95,-52,95,-51,95,-43,]),'NULL':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,96,-40,-38,-39,96,-50,96,-48,-49,96,96,96,96,-102,-103,-104,96,96,-45,-46,-47,96,96,96,96,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,96,96,96,96,96,-1,-42,-41,96,-52,96,-51,96,-43,]),'TRUE':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,97,-40,-38,-39,97,-50,97,-48,-49,97,97,97,97,-102,-103,-104,97,97,-45,-46,-47,97,97,97,97,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,97,97,97,97,97,-1,-42,-41,97,-52,97,-51,97,-43,]),'FALSE':([40,60,64,65,67,68,70,73,74,78,79,84,85,99,103,107,108,109,111,112,116,117,118,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,155,156,159,160,162,166,167,171,172,173,174,175,177,178,],[-20,-1,98,-40,-38,-39,98,-50,98,-48,-49,98,98,98,98,-102,-103,-104,98,98,-45,-46,-47,98,98,98,98,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-44,98,98,98,98,98,-1,-42,-41,98,-52,98,-51,98,-43,]),'ELSE':([40,67,73,78,79,116,117,118,148,166,167,171,173,175,178,],[-20,-38,-50,-48,-49,-45,-46,-47,-44,172,-42,-41,-52,-51,-43,]),'PLUS':([70,74,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,149,153,154,155,157,158,160,161,162,169,170,],[107,107,-63,-64,-65,-57,-58,-59,-60,-61,-62,107,131,-80,-81,107,-76,-68,-69,-102,-103,-104,-74,107,131,107,-86,-88,-87,-89,107,131,-66,107,107,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,131,131,131,131,-75,107,131,131,107,-77,107,131,-67,]),'MINUS':([70,74,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,149,153,154,155,157,158,160,161,162,169,170,],[108,108,-63,-64,-65,-57,-58,-59,-60,-61,-62,108,132,-80,-81,108,-76,-68,-69,-102,-103,-104,-74,108,132,108,-86,-88,-87,-89,108,132,-66,108,108,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,132,132,132,132,-75,108,132,132,108,-77,108,132,-67,]),'NOT':([70,74,99,103,107,108,109,111,119,124,129,130,131,132,133,134,135,136,137,138,139,140,141,142,155,160,162,],[109,109,109,109,-102,-103,-104,109,109,109,109,109,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,109,109,109,]),'DOT':([81,83,86,87,88,89,90,91,93,94,95,96,97,98,101,104,105,106,110,122,123,128,154,161,170,],[-69,-68,-74,-76,125,-63,-64,-65,-57,-58,-59,-60,-61,-62,125,-76,-68,-69,-74,-68,-68,-66,-75,-77,-67,]),'EQUALS':([83,86,87,104,105,110,154,],[119,-74,-76,-76,119,-74,-75,]),'TIMES':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,133,-80,-81,-76,-68,-69,-74,133,-86,-88,-87,-89,133,-66,133,133,133,133,-75,133,133,-77,133,-67,]),'DIVIDE':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,134,-80,-81,-76,-68,-69,-74,134,-86,-88,-87,-89,134,-66,134,134,134,134,-75,134,134,-77,134,-67,]),'AND':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,135,-80,-81,-76,-68,-69,-74,135,-86,-88,-87,-89,135,-66,135,135,135,135,-75,135,135,-77,135,-67,]),'OR':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,136,-80,-81,-76,-68,-69,-74,136,-86,-88,-87,-89,136,-66,136,136,136,136,-75,136,136,-77,136,-67,]),'DOUBLE_EQUALS':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,137,-80,-81,-76,-68,-69,-74,137,-86,-88,-87,-89,137,-66,137,137,137,137,-75,137,137,-77,137,-67,]),'NOT_EQUAL':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,138,-80,-81,-76,-68,-69,-74,138,-86,-88,-87,-89,138,-66,138,138,138,138,-75,138,138,-77,138,-67,]),'L_EQ':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,139,-80,-81,-76,-68,-69,-74,139,-86,-88,-87,-89,139,-66,139,139,139,139,-75,139,139,-77,139,-67,]),'G_EQ':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,140,-80,-81,-76,-68,-69,-74,140,-86,-88,-87,-89,140,-66,140,140,140,140,-75,140,140,-77,140,-67,]),'LESS':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,141,-80,-81,-76,-68,-69,-74,141,-86,-88,-87,-89,141,-66,141,141,141,141,-75,141,141,-77,141,-67,]),'GREATER':([89,90,91,93,94,95,96,97,98,100,101,102,104,105,106,110,114,120,121,122,123,127,128,143,144,149,153,154,157,158,161,169,170,],[-63,-64,-65,-57,-58,-59,-60,-61,-62,142,-80,-81,-76,-68,-69,-74,142,-86,-88,-87,-89,142,-66,142,142,142,142,-75,142,142,-77,142,-67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'class_decl':([0,2,],[2,2,]),'empty':([0,2,6,10,12,18,37,39,48,60,74,112,124,155,160,166,174,],[3,3,9,21,21,33,45,51,51,65,115,147,152,165,115,173,147,]),'opt_extend':([6,],[7,]),'class_body_decl_mult':([10,],[12,]),'class_body_decl':([10,12,],[13,23,]),'field_decl':([10,12,],[14,14,]),'method_decl':([10,12,],[15,15,]),'constructor_decl':([10,12,],[16,16,]),'modifier':([10,12,],[17,17,]),'visibility':([10,12,],[18,18,]),'var_decl':([17,64,156,159,172,177,],[24,79,79,79,79,79,]),'type':([17,37,39,48,55,64,156,159,172,177,],[25,47,47,47,47,82,82,82,82,82,]),'opt_static':([18,],[31,]),'variables':([25,82,],[35,35,]),'variable':([25,41,47,82,],[36,52,56,36,]),'opt_formals_alt':([37,],[43,]),'formals':([37,39,48,],[44,50,50,]),'formal_param':([37,39,48,55,],[46,46,46,61,]),'opt_formals':([39,48,],[49,57,]),'block':([54,58,62,64,156,159,172,177,],[59,63,66,78,78,78,78,78,]),'stmt_mult':([60,],[64,]),'stmt':([64,156,159,172,177,],[68,166,167,175,178,]),'stmt_expr':([64,112,156,159,172,174,177,],[75,146,75,75,75,146,75,]),'assign':([64,70,74,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[80,102,102,102,102,102,80,102,102,102,102,102,80,80,102,102,80,80,80,]),'method_invocation':([64,70,74,84,85,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[81,106,106,106,106,106,106,106,81,106,106,106,106,106,81,81,106,106,81,81,81,]),'lhs':([64,70,74,84,85,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[83,105,105,122,123,105,105,105,83,105,105,105,105,105,83,83,105,105,83,83,83,]),'field_access':([64,70,74,84,85,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[86,110,110,110,110,110,110,110,86,110,110,110,110,110,86,86,110,110,86,86,86,]),'primary':([64,70,74,84,85,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[88,101,101,88,88,101,101,101,88,101,101,101,101,101,88,88,101,101,88,88,88,]),'literal':([64,70,74,84,85,99,103,111,112,119,124,129,130,155,156,159,160,162,172,174,177,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'expr':([70,74,99,103,111,119,124,129,130,155,160,162,],[100,114,127,143,144,149,153,157,158,153,114,169,]),'unary_op':([70,74,99,103,111,119,124,129,130,155,160,162,],[103,103,103,103,103,103,103,103,103,103,103,103,]),'opt_expr':([74,160,],[113,168,]),'arith_op':([100,114,127,143,144,149,153,157,158,169,],[129,129,129,129,129,129,129,129,129,129,]),'bool_op':([100,114,127,143,144,149,153,157,158,169,],[130,130,130,130,130,130,130,130,130,130,]),'opt_stmt_expr':([112,174,],[145,176,]),'opt_args_alt':([124,],[150,]),'arguments':([124,155,],[151,164,]),'opt_args':([155,],[163,]),'opt_else_stmt':([166,],[171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','decaf_parser.py',25),
  ('program -> class_decl','program',1,'p_program','decaf_parser.py',30),
  ('program -> class_decl program','program',2,'p_program','decaf_parser.py',31),
  ('program -> empty','program',1,'p_program','decaf_parser.py',32),
  ('class_decl -> CLASS ID opt_extend LBRACK class_body_decl_mult RBRACK','class_decl',6,'p_class_decl','decaf_parser.py',41),
  ('opt_extend -> EXTENDS ID','opt_extend',2,'p_class_decl','decaf_parser.py',42),
  ('opt_extend -> empty','opt_extend',1,'p_class_decl','decaf_parser.py',43),
  ('class_body_decl_mult -> class_body_decl_mult class_body_decl','class_body_decl_mult',2,'p_class_body_decl_mult','decaf_parser.py',50),
  ('class_body_decl_mult -> class_body_decl','class_body_decl_mult',1,'p_class_body_decl_mult','decaf_parser.py',51),
  ('class_body_decl -> field_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',60),
  ('class_body_decl -> method_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',61),
  ('class_body_decl -> constructor_decl','class_body_decl',1,'p_class_body_decl','decaf_parser.py',62),
  ('field_decl -> modifier var_decl','field_decl',2,'p_field_decl','decaf_parser.py',72),
  ('modifier -> visibility opt_static','modifier',2,'p_modifier','decaf_parser.py',82),
  ('visibility -> PUBLIC','visibility',1,'p_modifier','decaf_parser.py',83),
  ('visibility -> PRIVATE','visibility',1,'p_modifier','decaf_parser.py',84),
  ('visibility -> empty','visibility',1,'p_modifier','decaf_parser.py',85),
  ('opt_static -> STATIC','opt_static',1,'p_modifier','decaf_parser.py',86),
  ('opt_static -> empty','opt_static',1,'p_modifier','decaf_parser.py',87),
  ('var_decl -> type variables SEMICOLON','var_decl',3,'p_var_decl','decaf_parser.py',96),
  ('type -> INT','type',1,'p_type','decaf_parser.py',101),
  ('type -> FLOAT','type',1,'p_type','decaf_parser.py',102),
  ('type -> BOOLEAN','type',1,'p_type','decaf_parser.py',103),
  ('type -> ID','type',1,'p_type','decaf_parser.py',104),
  ('variables -> variables COMMA variable','variables',3,'p_variables','decaf_parser.py',109),
  ('variables -> variable','variables',1,'p_variables','decaf_parser.py',110),
  ('variable -> ID','variable',1,'p_variable','decaf_parser.py',115),
  ('method_decl -> modifier type ID LPAREN opt_formals RPAREN block','method_decl',7,'p_method_decl','decaf_parser.py',120),
  ('method_decl -> modifier VOID ID LPAREN opt_formals RPAREN block','method_decl',7,'p_method_decl','decaf_parser.py',121),
  ('opt_formals -> formals','opt_formals',1,'p_method_decl','decaf_parser.py',122),
  ('opt_formals -> empty','opt_formals',1,'p_method_decl','decaf_parser.py',123),
  ('constructor_decl -> modifier ID LPAREN opt_formals_alt RPAREN block','constructor_decl',6,'p_constructor_decl','decaf_parser.py',128),
  ('opt_formals_alt -> formals','opt_formals_alt',1,'p_constructor_decl','decaf_parser.py',129),
  ('opt_formals_alt -> empty','opt_formals_alt',1,'p_constructor_decl','decaf_parser.py',130),
  ('formals -> formals COMMA formal_param','formals',3,'p_formals','decaf_parser.py',135),
  ('formals -> formal_param','formals',1,'p_formals','decaf_parser.py',136),
  ('formal_param -> type variable','formal_param',2,'p_formal_param','decaf_parser.py',141),
  ('block -> LBRACK stmt_mult RBRACK','block',3,'p_block','decaf_parser.py',146),
  ('stmt_mult -> stmt_mult stmt','stmt_mult',2,'p_stmt_mult','decaf_parser.py',151),
  ('stmt_mult -> empty','stmt_mult',1,'p_stmt_mult','decaf_parser.py',152),
  ('stmt -> IF LPAREN expr RPAREN stmt opt_else_stmt','stmt',6,'p_stmt','decaf_parser.py',157),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt','decaf_parser.py',158),
  ('stmt -> FOR LPAREN opt_stmt_expr SEMICOLON opt_expr SEMICOLON opt_stmt_expr RPAREN stmt','stmt',9,'p_stmt','decaf_parser.py',159),
  ('stmt -> RETURN opt_expr SEMICOLON','stmt',3,'p_stmt','decaf_parser.py',160),
  ('stmt -> stmt_expr SEMICOLON','stmt',2,'p_stmt','decaf_parser.py',161),
  ('stmt -> BREAK SEMICOLON','stmt',2,'p_stmt','decaf_parser.py',162),
  ('stmt -> CONTINUE SEMICOLON','stmt',2,'p_stmt','decaf_parser.py',163),
  ('stmt -> block','stmt',1,'p_stmt','decaf_parser.py',164),
  ('stmt -> var_decl','stmt',1,'p_stmt','decaf_parser.py',165),
  ('stmt -> SEMICOLON','stmt',1,'p_stmt','decaf_parser.py',166),
  ('opt_else_stmt -> ELSE stmt','opt_else_stmt',2,'p_stmt','decaf_parser.py',167),
  ('opt_else_stmt -> empty','opt_else_stmt',1,'p_stmt','decaf_parser.py',168),
  ('opt_expr -> expr','opt_expr',1,'p_stmt','decaf_parser.py',169),
  ('opt_expr -> empty','opt_expr',1,'p_stmt','decaf_parser.py',170),
  ('opt_stmt_expr -> stmt_expr','opt_stmt_expr',1,'p_stmt','decaf_parser.py',171),
  ('opt_stmt_expr -> empty','opt_stmt_expr',1,'p_stmt','decaf_parser.py',172),
  ('literal -> INT_CONST','literal',1,'p_literal','decaf_parser.py',177),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','decaf_parser.py',178),
  ('literal -> STRING_CONST','literal',1,'p_literal','decaf_parser.py',179),
  ('literal -> NULL','literal',1,'p_literal','decaf_parser.py',180),
  ('literal -> TRUE','literal',1,'p_literal','decaf_parser.py',181),
  ('literal -> FALSE','literal',1,'p_literal','decaf_parser.py',182),
  ('primary -> literal','primary',1,'p_primary','decaf_parser.py',187),
  ('primary -> THIS','primary',1,'p_primary','decaf_parser.py',188),
  ('primary -> SUPER','primary',1,'p_primary','decaf_parser.py',189),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_primary','decaf_parser.py',190),
  ('primary -> NEW ID LPAREN opt_args RPAREN','primary',5,'p_primary','decaf_parser.py',191),
  ('primary -> lhs','primary',1,'p_primary','decaf_parser.py',192),
  ('primary -> method_invocation','primary',1,'p_primary','decaf_parser.py',193),
  ('opt_args -> arguments','opt_args',1,'p_primary','decaf_parser.py',194),
  ('opt_args -> empty','opt_args',1,'p_primary','decaf_parser.py',195),
  ('arguments -> arguments COMMA expr','arguments',3,'p_arguments','decaf_parser.py',200),
  ('arguments -> expr','arguments',1,'p_arguments','decaf_parser.py',201),
  ('lhs -> field_access','lhs',1,'p_lhs','decaf_parser.py',206),
  ('field_access -> primary DOT ID','field_access',3,'p_field_access','decaf_parser.py',211),
  ('field_access -> ID','field_access',1,'p_field_access','decaf_parser.py',212),
  ('method_invocation -> field_access LPAREN opt_args_alt RPAREN','method_invocation',4,'p_method_invocation','decaf_parser.py',217),
  ('opt_args_alt -> arguments','opt_args_alt',1,'p_method_invocation','decaf_parser.py',218),
  ('opt_args_alt -> empty','opt_args_alt',1,'p_method_invocation','decaf_parser.py',219),
  ('expr -> primary','expr',1,'p_expr','decaf_parser.py',224),
  ('expr -> assign','expr',1,'p_expr','decaf_parser.py',225),
  ('expr -> expr arith_op expr','expr',3,'p_expr','decaf_parser.py',226),
  ('expr -> expr bool_op expr','expr',3,'p_expr','decaf_parser.py',227),
  ('expr -> unary_op expr','expr',2,'p_expr','decaf_parser.py',228),
  ('assign -> lhs EQUALS expr','assign',3,'p_assign','decaf_parser.py',233),
  ('assign -> lhs DOUBLE_PLUS','assign',2,'p_assign','decaf_parser.py',234),
  ('assign -> DOUBLE_PLUS lhs','assign',2,'p_assign','decaf_parser.py',235),
  ('assign -> lhs DOUBLE_MINUS','assign',2,'p_assign','decaf_parser.py',236),
  ('assign -> DOUBLE_MINUS lhs','assign',2,'p_assign','decaf_parser.py',237),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','decaf_parser.py',242),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','decaf_parser.py',243),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','decaf_parser.py',244),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','decaf_parser.py',245),
  ('bool_op -> AND','bool_op',1,'p_bool_op','decaf_parser.py',250),
  ('bool_op -> OR','bool_op',1,'p_bool_op','decaf_parser.py',251),
  ('bool_op -> DOUBLE_EQUALS','bool_op',1,'p_bool_op','decaf_parser.py',252),
  ('bool_op -> NOT_EQUAL','bool_op',1,'p_bool_op','decaf_parser.py',253),
  ('bool_op -> L_EQ','bool_op',1,'p_bool_op','decaf_parser.py',254),
  ('bool_op -> G_EQ','bool_op',1,'p_bool_op','decaf_parser.py',255),
  ('bool_op -> LESS','bool_op',1,'p_bool_op','decaf_parser.py',256),
  ('bool_op -> GREATER','bool_op',1,'p_bool_op','decaf_parser.py',257),
  ('unary_op -> PLUS','unary_op',1,'p_unary_op','decaf_parser.py',262),
  ('unary_op -> MINUS','unary_op',1,'p_unary_op','decaf_parser.py',263),
  ('unary_op -> NOT','unary_op',1,'p_unary_op','decaf_parser.py',264),
  ('stmt_expr -> assign','stmt_expr',1,'p_stmt_expr','decaf_parser.py',269),
  ('stmt_expr -> method_invocation','stmt_expr',1,'p_stmt_expr','decaf_parser.py',270),
]
